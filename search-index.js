var searchIndex = {};
searchIndex["cge"] = {"doc":"An implementation of the CGE neural network encoding. The Network struct has methods for\nevaluating a neural network, resetting its state, and saving to and loading from files and\nstrings.","items":[[0,"transfer","cge","Option type for setting the transfer function.",null,null],[4,"TransferFunction","cge::transfer","Represents which transfer function to use for evaluating neural networks.",null,null],[13,"Linear","","Maps input to output directly, as if there is no transfer function.",0,null],[13,"Threshold","","Outputs 1 if input is greater than 0, 0 otherwise.",0,null],[13,"Sign","","Outputs 1 if input is greater than 0, 0 if input is equal to 0, -1 otherwise. Useful\nfor simple problems and boolean logic, as it only allows three possible output values.",0,null],[13,"Sigmoid","","A non-linear function. This function is the most general, so it should be defaulted to.",0,null],[5,"threshold","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"sign","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"sigmoid","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[11,"eq","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[0,"gene","cge","",null,null],[3,"Gene","cge::gene","",null,null],[12,"weight","","",1,null],[12,"id","","",1,null],[12,"variant","","",1,null],[4,"GeneExtras","","An enum for storing additional information for different types of genes",null,null],[13,"Input","","Input contains a current value",2,null],[13,"Neuron","","Neuron contains a current value and an input count",2,null],[13,"Forward","","",2,null],[13,"Recurrent","","",2,null],[13,"Bias","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"forward","","",1,{"inputs":[{"name":"f64"},{"name":"usize"}],"output":{"name":"gene"}}],[11,"recurrent","","",1,{"inputs":[{"name":"f64"},{"name":"usize"}],"output":{"name":"gene"}}],[11,"input","","",1,{"inputs":[{"name":"f64"},{"name":"usize"}],"output":{"name":"gene"}}],[11,"bias","","",1,{"inputs":[{"name":"f64"}],"output":{"name":"gene"}}],[11,"neuron","","",1,{"inputs":[{"name":"f64"},{"name":"usize"},{"name":"usize"}],"output":{"name":"gene"}}],[0,"network","cge","The neural network struct.",null,null],[3,"Network","cge::network","",null,null],[12,"size","","",3,null],[12,"genome","","",3,null],[12,"function","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"evaluate","","Evaluates the neural network with the given inputs, returning a vector of outputs. The encoding can\nencode recurrent connections and bias inputs, so an internal state is used. It is important to run\nthe clear_state method before calling evaluate again, unless it is desired to allow data\ncarry over from the previous evaluation, for example if the network is being used as a real\ntime controller.",3,null],[11,"debug_eval","","Evaluates the neural network the same as `evaluate`, but prints debug info.",3,null],[11,"clear_state","","Clears the internal state of the neural network.",3,null],[11,"from_str","","Loads a neural network from a string. Returns `None` if the format is incorrect.",3,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"to_str","","Saves the neural network to a string. Allows embedding a neural network in source code.",3,null],[11,"save_to_file","","Saves the neural network to a file. Returns an empty tuple on success, or an io error.",3,null],[11,"load_from_file","","Loads a neural network from a file. No guarantees are made about the validity of the\ngenome. Returns the network, or an io error. If the file is in a bad format,\n`std::io::ErrorKind::InvalidData` is returned.",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"get_subnetwork_index","","Returns the start and end index of the subnetwork starting at the neuron with the given id,\nor None if it does not exist.",3,null],[11,"get_neuron_index","","Returns the index of the neuron with the given id, or None if it does not exist.",3,null]],"paths":[[4,"TransferFunction"],[3,"Gene"],[4,"GeneExtras"],[3,"Network"]]};
initSearch(searchIndex);
